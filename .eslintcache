[{"/home/vibe/trynotttolaugh/src/index.js":"1","/home/vibe/trynotttolaugh/src/App.js":"2","/home/vibe/trynotttolaugh/src/MainGameComponent.js":"3","/home/vibe/trynotttolaugh/src/StartComponent.js":"4","/home/vibe/trynotttolaugh/src/FaceRecognitionComponent.js":"5"},{"size":376,"mtime":1611742904408,"results":"6","hashOfConfig":"7"},{"size":598,"mtime":1613653602050,"results":"8","hashOfConfig":"7"},{"size":3145,"mtime":1613927017601,"results":"9","hashOfConfig":"7"},{"size":1614,"mtime":1613929864675,"results":"10","hashOfConfig":"7"},{"size":4461,"mtime":1613929439261,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1i0tlxb",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/vibe/trynotttolaugh/src/index.js",[],["25","26"],"/home/vibe/trynotttolaugh/src/App.js",[],"/home/vibe/trynotttolaugh/src/MainGameComponent.js",["27","28"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport FaceRecognitionComponent from \"./FaceRecognitionComponent\";\r\nimport './MainGameComponent.css';\r\n\r\nexport default function MainGameComponent(props) {\r\n  const output = useRef();\r\n\r\n  const [score, scoreSetter] = useState(0);\r\n  const [highScore, highScoreSetter] = useState(0);\r\n\r\n  const location = useLocation()\r\n\r\n  const delay = (t) =>\r\n    new Promise((resolve) =>\r\n      window.RUNNING ? setTimeout(resolve, t) : resolve\r\n    );\r\n\r\n  const say = function (text) {\r\n    output.current.innerHTML = text;\r\n    return new Promise((resolve) => {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.onend = resolve;\r\n      window.speechSynthesis.speak(utterance);\r\n    });\r\n  };\r\n\r\n  const fetchAndNarrate = async () => {\r\n    console.log(location.state.type)\r\n    while (window.RUNNING) {\r\n      var res = await fetch(`https://v2.jokeapi.dev/joke/${location.state.type}?blacklistFlags=explicit`);      \r\n      var json = await res.json();\r\n      if (\"speechSynthesis\" in window) {\r\n        if (json.type === \"twopart\") {\r\n          if (window.RUNNING) {\r\n            await say(json.setup);\r\n            await delay(3000);\r\n          } else return;\r\n          if (window.RUNNING) {\r\n            await say(json.delivery);\r\n            await delay(5000);\r\n          } else return;\r\n        } else if (json.type === \"single\") {\r\n          if (window.RUNNING) {\r\n            await say(json.joke);\r\n            await delay(5000);\r\n          } else return;\r\n        }\r\n      } else {\r\n        if (json.type === \"twopart\") {\r\n          if (window.RUNNING) {\r\n            output.innerHTML = json.setup;\r\n            await delay(3000);\r\n          } else return;\r\n          if (window.RUNNING) {\r\n            output.innerHTML = json.delivery;\r\n            await delay(5000);\r\n          } else return;\r\n        } else if (json.type === \"single\") {\r\n          output.innerHTML = json.delivery;\r\n          await delay(5000);\r\n        }\r\n      }\r\n      if (window.RUNNING) {\r\n        scoreSetter((prevState) => prevState + 10);\r\n      } else return;\r\n    }\r\n  };\r\n\r\n  const onGameRestart = () => {\r\n    output.current.innerHTML = ''\r\n    scoreSetter(0);\r\n    window.RUNNING = true;\r\n    fetchAndNarrate();\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.RUNNING = true;\r\n    fetchAndNarrate();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (score > highScore) highScoreSetter(score);\r\n  }, [score]);\r\n\r\n  return (\r\n    <div className='main-game-container'>\r\n    <div className='joke-components-container'>\r\n      <div className='joke-text-container'><text className='joke-text' ref={output}/></div>\r\n      <div class=\"break\"></div>\r\n      <div className='score-container'>\r\n      <div className='score'>Score: {score}</div>\r\n      <div class=\"break\"></div>\r\n      <div className='high-score'>High Score: {highScore}</div>\r\n      </div>\r\n      <div class=\"break\"></div>\r\n    </div>\r\n    <FaceRecognitionComponent onGameRestart={onGameRestart} score={score} highScore={highScore}></FaceRecognitionComponent>\r\n    </div>\r\n  );\r\n}\r\n","/home/vibe/trynotttolaugh/src/StartComponent.js",[],"/home/vibe/trynotttolaugh/src/FaceRecognitionComponent.js",["29"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as faceapi from \"face-api.js\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction TestComponent(props) {\r\n  const video = useRef();\r\n  var intervalRef;\r\n  var isStarted = false;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [cantSee, setCantSee] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const initCamera = async (width, height) => {\r\n    console.log(\"initing camera\");\r\n    video.current.width=width;\r\n    video.current.height=height; \r\n    const stream = await navigator.mediaDevices.getUserMedia({ \r\n      audio: false,\r\n      video: {\r\n        facingMode: \"user\",\r\n        width: width,\r\n        height: height,\r\n      },\r\n    });\r\n    video.current.srcObject = stream;\r\n    return new Promise((resolve) => {\r\n      video.current.onloadedmetadata = () => {\r\n        resolve(video);\r\n      };\r\n    });\r\n  };\r\n\r\n  const startEmotionDetection = () => {\r\n    isStarted = true;\r\n    const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\r\n\r\n    Promise.all([\r\n      faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\r\n      faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\r\n      faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\r\n      faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\r\n    ]).then(() => {\r\n      console.log(\"started reading\");\r\n      if (!intervalRef) {\r\n        intervalRef = setInterval(async () => {\r\n          let happiness;\r\n\r\n          try {\r\n            const detections = await faceapi\r\n              .detectSingleFace(\r\n                video.current,\r\n                new faceapi.TinyFaceDetectorOptions()\r\n              )\r\n              .withFaceExpressions();\r\n            setCantSee(false);\r\n            if (detections.expressions.hasOwnProperty(\"happy\")) {\r\n              happiness = detections.expressions.happy;\r\n            }\r\n\r\n            if (happiness > 0.7) {\r\n              console.log(\"you smiled!\");\r\n              window.RUNNING = false;\r\n              if (window.speechSynthesis.speaking)\r\n                window.speechSynthesis.cancel();\r\n              console.log(\"stopping detection\");\r\n              if (isStarted) {\r\n                clearInterval(intervalRef);\r\n              }\r\n              isStarted = false;\r\n              intervalRef = false;\r\n              setShow(true);\r\n            }\r\n          } catch (e) {\r\n            console.log(e);\r\n            setCantSee(true);\r\n          }\r\n          // const resizedDetections = faceapi.resizeResults(detections, displaySize)\r\n          // canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)\r\n          // faceapi.draw.drawDetections(canvas, resizedDetections)\r\n          // faceapi.draw.drawFaceLandmarks(canvas, resizedDetections)\r\n          // faceapi.draw.drawFaceExpressions(canvas, resizedDetections)\r\n        }, 100);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setShow(false);\r\n    props.onGameRestart();\r\n    startEmotionDetection();\r\n  };\r\n\r\n  const handleGoHome = () => {\r\n    setShow(false);\r\n    history.replace({\r\n      pathname: \"/home\",\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    initCamera(320,240).then((video) => {\r\n      console.log(\"Camera was initialized\");\r\n    });\r\n    startEmotionDetection();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <video ref={video} autoPlay muted playsInline className=\"stream\" style={{borderColor: `${cantSee? \"red\" : \"#FFE263\"}`}}></video>\r\n      {cantSee ? <div className='cant-see-warning'> <text> Can't see your face! </text></div> : null}\r\n\r\n      <Modal\r\n        show={show}\r\n        animation=\"true\"\r\n        className=\"modal\"\r\n        overlayClassName=\"modal-overlay\"\r\n      >\r\n        <Modal.Header className='modal-header'>\r\n          <Modal.Title>You Lost!</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='modal-body'>\r\n          <div>score: {props.score}</div>\r\n          <div>high score: {props.highScore}</div>\r\n        </Modal.Body>\r\n        <Modal.Footer className='modal-footer'>\r\n          <Button onClick={handleRestart}>\r\n            Restart\r\n          </Button>\r\n          <Button onClick={handleGoHome}>\r\n            Home\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst areEqual = (prevProps, nextProps) => true;\r\n\r\nexport default React.memo(TestComponent, areEqual);\r\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":80,"column":6,"nodeType":"36","endLine":80,"endColumn":8,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":84,"column":6,"nodeType":"36","endLine":84,"endColumn":13,"suggestions":"39"},{"ruleId":"34","severity":1,"message":"40","line":110,"column":6,"nodeType":"36","endLine":110,"endColumn":8,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAndNarrate'. Either include it or remove the dependency array.","ArrayExpression",["44"],"React Hook useEffect has a missing dependency: 'highScore'. Either include it or remove the dependency array.",["45"],"React Hook useEffect has a missing dependency: 'startEmotionDetection'. Either include it or remove the dependency array.",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},"Update the dependencies array to be: [fetchAndNarrate]",{"range":"53","text":"54"},"Update the dependencies array to be: [highScore, score]",{"range":"55","text":"56"},"Update the dependencies array to be: [startEmotionDetection]",{"range":"57","text":"58"},[2421,2423],"[fetchAndNarrate]",[2507,2514],"[highScore, score]",[3379,3381],"[startEmotionDetection]"]